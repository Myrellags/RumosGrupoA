// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppMVCEcommerce.Data;

namespace WebAppMVCEcommerce.Migrations
{
    [DbContext(typeof(BDEcommerce))]
    [Migration("20210522141038_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Accounting.InvoiceToPay", b =>
                {
                    b.Property<int>("InvoiceToPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InputInvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("InvoiceToPayID");

                    b.HasIndex("InputInvoiceID");

                    b.HasIndex("InvoiceToPayID")
                        .IsUnique();

                    b.ToTable("InvoiceToPays");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Accounting.InvoiceToReceive", b =>
                {
                    b.Property<int>("InvoiceToReceiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceOrderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceToReceiveID");

                    b.HasIndex("InvoiceOrderID");

                    b.HasIndex("InvoiceToReceiveID")
                        .IsUnique();

                    b.ToTable("InvoiceToReceives");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.Costumer", b =>
                {
                    b.Property<int>("CostumerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginUser")
                        .HasColumnType("int");

                    b.HasKey("CostumerID");

                    b.HasIndex("LoginUser");

                    b.ToTable("Costumers");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.InvoiceOrder", b =>
                {
                    b.Property<int>("InvoiceOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoicesReceivableID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceOrderID");

                    b.HasIndex("InvoicesReceivableID");

                    b.ToTable("InvoiceOrders");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.InvoicesReceivable", b =>
                {
                    b.Property<int>("InvoicesReceivableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountProduct")
                        .HasColumnType("int");

                    b.Property<int>("CostumerID")
                        .HasColumnType("int");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountCoupon")
                        .HasColumnType("float");

                    b.Property<int>("MethodOfPaymentID")
                        .HasColumnType("int");

                    b.Property<double>("PriceProduct")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCarID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WeightProduct")
                        .HasColumnType("float");

                    b.HasKey("InvoicesReceivableID");

                    b.HasIndex("CostumerID");

                    b.HasIndex("MethodOfPaymentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShoppingCarID");

                    b.ToTable("InvoicesReceivables");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ProductsShoppingCar", b =>
                {
                    b.Property<int>("ProductsShoppingCarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCarID")
                        .HasColumnType("int");

                    b.HasKey("ProductsShoppingCarID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShoppingCarID");

                    b.ToTable("ProductsShoppingCars");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.Provider", b =>
                {
                    b.Property<int>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CC")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("City")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Morada")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NIF")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMidia")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.SendOrder", b =>
                {
                    b.Property<int>("SendOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceOrderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SendOrderID");

                    b.HasIndex("InvoiceOrderID");

                    b.ToTable("SendOrders");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ShoppingCar", b =>
                {
                    b.Property<int>("ShoppingCarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostumerID")
                        .HasColumnType("int");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodOfPaymentID")
                        .HasColumnType("int");

                    b.Property<double>("PriceProduct")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfProdut")
                        .HasColumnType("int");

                    b.Property<double>("WeightProduct")
                        .HasColumnType("float");

                    b.HasKey("ShoppingCarID");

                    b.HasIndex("CostumerID");

                    b.HasIndex("MethodOfPaymentID");

                    b.HasIndex("ProductID");

                    b.ToTable("ShoppingCars");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.UnlockedStock", b =>
                {
                    b.Property<int>("UnlockedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnlockedID");

                    b.HasIndex("ProductID");

                    b.ToTable("UnlockedStocks");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Personal.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CC")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("City")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("District")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LoginUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Morada")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NIF")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PassUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMidia")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Surname")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("UserID");

                    b.HasIndex("LoginUser")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.InputInvoice", b =>
                {
                    b.Property<int>("InputInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CampaignProvider")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateII")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodOfPayment")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NameProvider")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NumberII")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("PriceProduct")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseRequestID")
                        .HasColumnType("int");

                    b.Property<int>("QtdProduct")
                        .HasColumnType("int");

                    b.HasKey("InputInvoiceID");

                    b.HasIndex("PurchaseRequestID");

                    b.ToTable("InputInvoices");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.MethodOfPayment", b =>
                {
                    b.Property<int>("MethodOfPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameMethodOfPayment")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("TypeMethodOfPayment")
                        .HasColumnType("int");

                    b.HasKey("MethodOfPaymentID");

                    b.ToTable("MethodOfPayments");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.PurchaseRequest", b =>
                {
                    b.Property<int>("PurchaseRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CampaignProvider")
                        .HasColumnType("float");

                    b.Property<string>("MethodOfPayment")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("Okay")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseRequestID");

                    b.HasIndex("QuotationID");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.Quotation", b =>
                {
                    b.Property<int>("QuotationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataReq")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MethodOfPaymentID")
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("PriceProduct")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityProduct")
                        .HasColumnType("int");

                    b.HasKey("QuotationID");

                    b.HasIndex("MethodOfPaymentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameInventory")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Inventorys");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.IsOnSale", b =>
                {
                    b.Property<int>("IsOnSaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CostProduct")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<double>("ValueSalePercent")
                        .HasColumnType("float");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("IsOnSaleID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("IsOnSales");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DiscontinuedProduct")
                        .HasColumnType("bit");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int?>("InvoicesReceivableID")
                        .HasColumnType("int");

                    b.Property<int?>("IsOnSaleID")
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePurchaseProduct")
                        .HasColumnType("float");

                    b.Property<double>("PriceSellProduct")
                        .HasColumnType("float");

                    b.Property<int?>("ProductsShoppingCarID")
                        .HasColumnType("int");

                    b.Property<int?>("QuotationID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPriceID")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCarID")
                        .HasColumnType("int");

                    b.Property<string>("TypeProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnlockedStockUnlockedID")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.Property<double>("WeightProduct")
                        .HasColumnType("float");

                    b.Property<byte>("image")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("InvoicesReceivableID");

                    b.HasIndex("IsOnSaleID");

                    b.HasIndex("ProductsShoppingCarID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("SalesPriceID");

                    b.HasIndex("ShoppingCarID");

                    b.HasIndex("UnlockedStockUnlockedID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.SalesPrice", b =>
                {
                    b.Property<int>("SalesPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CostsOthers")
                        .HasColumnType("float");

                    b.Property<double>("CostsProduct")
                        .HasColumnType("float");

                    b.Property<string>("Delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceSellProduct")
                        .HasColumnType("float");

                    b.Property<int>("ProdutoID")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfCosts")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesPriceID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("SalesPrices");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionWarehouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseID");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Accounting.InvoiceToPay", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.InputInvoice", "InputInvoices")
                        .WithMany()
                        .HasForeignKey("InputInvoiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InputInvoices");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Accounting.InvoiceToReceive", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Billing.InvoiceOrder", "InvoiceOrder")
                        .WithMany()
                        .HasForeignKey("InvoiceOrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoiceOrder");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.Costumer", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Personal.User", "User")
                        .WithMany()
                        .HasForeignKey("LoginUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.InvoiceOrder", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Billing.InvoicesReceivable", "InvoicesReceivable")
                        .WithMany()
                        .HasForeignKey("InvoicesReceivableID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoicesReceivable");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.InvoicesReceivable", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Billing.Costumer", "Costumer")
                        .WithMany()
                        .HasForeignKey("CostumerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.MethodOfPayment", "MethodOfPayment")
                        .WithMany()
                        .HasForeignKey("MethodOfPaymentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.ShoppingCar", "ShoppingCar")
                        .WithMany()
                        .HasForeignKey("ShoppingCarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Costumer");

                    b.Navigation("MethodOfPayment");

                    b.Navigation("Product");

                    b.Navigation("ShoppingCar");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ProductsShoppingCar", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.ShoppingCar", "ShoppingCar")
                        .WithMany()
                        .HasForeignKey("ShoppingCarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCar");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.SendOrder", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Billing.InvoiceOrder", "InvoiceOrder")
                        .WithMany()
                        .HasForeignKey("InvoiceOrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoiceOrder");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ShoppingCar", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Billing.Costumer", "Costumer")
                        .WithMany()
                        .HasForeignKey("CostumerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.MethodOfPayment", "MethodOfPayment")
                        .WithMany()
                        .HasForeignKey("MethodOfPaymentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Costumer");

                    b.Navigation("MethodOfPayment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.UnlockedStock", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.InputInvoice", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.PurchaseRequest", "PurchaseRequest")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.PurchaseRequest", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.Quotation", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.MethodOfPayment", "MethodOfPayment")
                        .WithMany()
                        .HasForeignKey("MethodOfPaymentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MethodOfPayment");

                    b.Navigation("Product");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Inventory", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.IsOnSale", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Product", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Inventory", null)
                        .WithMany("Products")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.InvoicesReceivable", null)
                        .WithMany("Products")
                        .HasForeignKey("InvoicesReceivableID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.IsOnSale", null)
                        .WithMany("Products")
                        .HasForeignKey("IsOnSaleID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.ProductsShoppingCar", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductsShoppingCarID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Purchase.Quotation", null)
                        .WithMany("Products")
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.SalesPrice", null)
                        .WithMany("Products")
                        .HasForeignKey("SalesPriceID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.ShoppingCar", null)
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCarID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Billing.UnlockedStock", null)
                        .WithMany("Products")
                        .HasForeignKey("UnlockedStockUnlockedID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.SalesPrice", b =>
                {
                    b.HasOne("WebAppMVCEcommerce.Models.Stock.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.InvoicesReceivable", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ProductsShoppingCar", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.ShoppingCar", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Billing.UnlockedStock", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Purchase.Quotation", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Inventory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.IsOnSale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.SalesPrice", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppMVCEcommerce.Models.Stock.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
